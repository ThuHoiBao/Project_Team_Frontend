import React, { useState } from 'react';
import OrderItem from '../orderItemComponent/OrderItem';
import './Order.css';
import imageOrder from '../../images/order.png';
import { useNavigate } from 'react-router-dom';
import { cancelOrderApi } from '../../services/order/order';  // Th√™m useNavigate
import imageCanceled from '../../images/cancelled.png'
import FeedbackModal  from "../FeedbackComponent/FeedbackModal";
import { submitBulkFeedback ,getFeedbacksByOrder } from "../../services/feedback/feedbackApi";
import ViewFeedbackModal from "../viewFeedBack/ViewFeedbackModal";
import { Link } from 'react-router-dom';
// Modal hi·ªÉn th·ªã c·∫£m ∆°n v√† s·ªë Xu
// Modal hi·ªÉn th·ªã c·∫£m ∆°n v√† s·ªë Xu
const ThankYouModal = ({ xu, onClose }) => (
  <div className="app-modal-overlay">
    <div className="app-modal thank-you-modal">
      <h4>C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!</h4>
      <p>B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c <b>{xu}<i className="fa fa-coins"></i></b>üí∞cho ƒë√°nh gi√° c·ªßa m√¨nh.</p>
      
      <div className="thank-you-note">
        <p>Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi ti·∫øp theo!</p>
      </div>

      <button onClick={onClose}>ƒê√≥ng</button>
    </div>
  </div>
);


// Modal Component v·ªõi fade-in
const AppModal = ({ message, onClose }) => (
  <div className="app-modal-overlay">
    <div className="app-modal">
      <p>{message}</p>
        <button onClick={onClose} className='btn-feedback'>ƒê√≥ng</button>
    </div>
  </div>
);
// Modal x√°c nh·∫≠n
const ConfirmModal = ({ message, onConfirm, onClose }) => (
  <div className="app-modal-overlay">
    <div className="app-modal">
      <p>{message}</p>

      {/* Icon hi·ªÉn th·ªã d∆∞·ªõi message */}
      <img 
        src={imageCanceled}  // thay link icon b·∫°n l·∫•y tr√™n m·∫°ng
        alt="Cancel Icon" 
        className="modal-icon"
      />
      <div className="modal-buttons">
        <button onClick={onClose}>H·ªßy</button>
        <button onClick={onConfirm} className="btn-feedback">X√°c nh·∫≠n</button>
      </div>
    </div>
  </div>
);

const Order = ({ order, orderItems, userId ,onOrderUpdate  }) => {
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [cancelOrderId, setCancelOrderId] = useState(null);
  console.log(userId);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [feedbacks, setFeedbacks] = useState([]);
  const [showViewFeedbackModal, setShowViewFeedbackModal] = useState(false);
  const [showThankYouModal, setShowThankYouModal] = useState(false);
const [xu, setXu] = useState(0);  // S·ªë xu nh·∫≠n ƒë∆∞·ª£c

const handleSubmitFeedback = async (feedbackList) => {
  try {
    const formData = new FormData();

    feedbackList.forEach((fb, index) => {
      formData.append(`feedbacks[${index}].comment`, fb.comment);
      formData.append(`feedbacks[${index}].rating`, fb.rating.toString());
      formData.append(`feedbacks[${index}].orderItemId`, fb.orderItemId);
      formData.append(`feedbacks[${index}].userId`, userId);
      formData.append(`feedbacks[${index}].orderId`, order.id);

      fb.images.forEach((img) => {
        formData.append(`feedbacks[${index}].images`, img);
      });
    });

    const result = await submitBulkFeedback(formData); // ch·ªâ truy·ªÅn formData
    console.log("Server response:", result);

  // T√≠nh Xu
    let totalXu = 0;
    feedbackList.forEach((fb) => {
        console.log(fb.comment.length)
        console.log(fb.images.length )
      if (fb.comment.length >= 50) {
        if (fb.images.length > 1) {
          totalXu += 2;  // 2 Xu n·∫øu c√≥ h∆°n 1 h√¨nh ·∫£nh
        } else if (fb.images.length === 1) {
          totalXu += 1;  // 1 Xu n·∫øu c√≥ 1 h√¨nh ·∫£nh
        }
      }
    });

    // C·∫≠p nh·∫≠t s·ªë xu v√† m·ªü modal c·∫£m ∆°n
    setXu(totalXu);  // C·∫≠p nh·∫≠t s·ªë xu
    setShowThankYouModal(true);  // M·ªü modal
    setShowFeedbackModal(false);
    // üî• g·ªçi l·∫°i API t·ª´ cha ƒë·ªÉ reload danh s√°ch
    if (typeof onOrderUpdate === "function") {
      onOrderUpdate();
    }
  } catch (err) {
    const errorMessage =
      err.response?.data?.message || err.message || "C√≥ l·ªói x·∫£y ra";
    openModal(errorMessage);
  }
};
  const handleViewFeedback = async () => {
    try {
      const res = await getFeedbacksByOrder(order.id);
      setFeedbacks(res); // BE tr·∫£ v·ªÅ array DTO
      setShowViewFeedbackModal(true);
    } catch (err) {
      console.error("L·ªói khi load feedback:", err);
    }
  };
const navigate = useNavigate();  // Khai b√°o navigate
  // L·∫•y th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng
  const getOrderStatusMessage = (status) => {
    switch (status) {
      case 'ORDERED':
        return 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng';
      case 'CONFIRMED':
        return 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n';
      case 'SHIPPED':
        return 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn';
      case 'COMPLETED':
        return 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c nh·∫≠n th√†nh c√¥ng';
      case 'CANCELLED':
        return 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy';
      case 'FEEDBACKED':
        return 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√°';
      default:
        return 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const formattedPrice = new Intl.NumberFormat('vi-VN').format(order.amount);

  // M·ªü modal v·ªõi th√¥ng ƒëi·ªáp
  const openModal = (message) => {
    console.log(message);  // Log message
    setModalMessage(message);
    setShowModal(true);
  };
  // H√†m chuy·ªÉn h∆∞·ªõng khi click v√†o ƒë∆°n h√†ng
const handleItemClick = () => {
  navigate('/order-detail', {
    state: { 
      order: { ...order }, 
      orderItems: orderItems.map(item => ({ ...item })) 
    }
  });
};

  // Render c√°c button theo tr·∫°ng th√°i ƒë∆°n h√†ng
  const renderButtons = (status) => {
    switch (status) {
      case 'ORDERED':
      return (
          <button className="btn-cancel" onClick={() => setCancelOrderId(order.id)}>
            H·ªßy ƒë∆°n
          </button>
        );
      case 'COMPLETED':
        return (
          <>
          {/* <button className="btn-buy-again" onClick={() => openModal("B·∫°n ƒë√£ mua l·∫°i th√†nh c√¥ng")}>
            Mua l·∫°i
          </button> */}
          <button className="btn-feedback" onClick={() => setShowFeedbackModal(true)}>
            Vi·∫øt ƒë√°nh gi√°
          </button>
        </>
        );

     
      case 'FEEDBACKED':
        return (
          <>
            {/* <button className="btn-buy-again" onClick={() => openModal('B·∫°n ƒë√£ mua l·∫°i th√†nh c√¥ng')}>Mua l·∫°i</button> */}
             <button className="btn-view-feedback" onClick={handleViewFeedback}>
              Xem ƒë√°nh gi√°
            </button>
          </>
        );

      default:
        return null;  // C√°c tr·∫°ng th√°i kh√°c (CONFIRMED, SHIPPED) kh√¥ng c√≥ n√∫t
    }
  };

  return (
    <div className="order">
      <div className="order-header">
        <h3>
          <div className='title-header'>M√£ ƒë∆°n h√†ng: <span>{order.id}</span></div>
        </h3>
        <h3>
          <div className='title-header'>Ng√†y ƒë·∫∑t h√†ng: 
          <span> {new Intl.DateTimeFormat('vi-VN').format(new Date(order.orderDate))}</span></div>
        </h3>
      </div>
      {order.orderStatus === 'CANCELLED' && order.cancellationReason && (
        <h3>
          <div
            style={{
              color: 'red',
              fontWeight: 400,      // ch·ªØ m·∫£nh
              fontSize: '15px' ,
              paddingBottom:'15px'     // c·ª° 14px
            }}
            role="alert"
            aria-live="polite"
          >
            L√Ω do h·ªßy: <span>{order.cancellationReason}</span>
          </div>
        </h3>
      )}


      {/* Tr·∫°ng th√°i ƒë∆°n h√†ng */}
      <div className="order-status-container">
      
        <span className="order-status"><img src={imageOrder} alt="Order Icon" className="order-status-icon" />{getOrderStatusMessage(order.orderStatus)}</span>
      </div>

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      {/* <div className="order-items">
        {orderItems.map((item) => (
          <OrderItem key={item.id} item={item} />
        ))}

      </div> */}
      <div className="order-items">
        {orderItems.map(item => (
          <div key={item.id} onClick={handleItemClick}> 
             <OrderItem key={item.id} item={item}></OrderItem>
          </div>
        ))}
      </div>

      {/* Th√†nh ti·ªÅn v√† c√°c button t∆∞∆°ng ·ª©ng */}
      <div className="order-total">
        <div>
          T·ªïng ti·ªÅn: <span className="price">{formattedPrice} VNƒê</span>
        </div>
        <div className="order-buttons">{renderButtons(order.orderStatus)}</div>
      </div>

      {/* Hi·ªÉn th·ªã modal khi click */}
      {showModal && <AppModal message={modalMessage} onClose={() => setShowModal(false)} />}

        {cancelOrderId && (
        <ConfirmModal
          message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y kh√¥ng?"
          onClose={() => setCancelOrderId(null)}
          onConfirm={async () => {
            try {
              await cancelOrderApi(userId, cancelOrderId);
              setCancelOrderId(null);
              openModal("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng");
               // üî• g·ªçi l·∫°i API t·ª´ cha ƒë·ªÉ reload danh s√°ch
              if (typeof onOrderUpdate === "function") {
                onOrderUpdate();
              }
            } catch (err) {
              console.error(err);
              setCancelOrderId(null);
              openModal("C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng");
            }
          }}
        />
      )}
       {showFeedbackModal && (
        <FeedbackModal
          orderItems={orderItems}
          onClose={() => setShowFeedbackModal(false)}
          onSubmit={handleSubmitFeedback}
        />
      )}
      {showViewFeedbackModal && (
        <ViewFeedbackModal
          feedbacks={feedbacks}
          onClose={() => setShowViewFeedbackModal(false)}
        />
      )}
          {/* Modal khi g·ª≠i ƒë√°nh gi√° th√†nh c√¥ng */}
    {showThankYouModal && (
      <ThankYouModal xu={xu} onClose={() => setShowThankYouModal(false)} />
    )}
    </div>
  );
};

export default Order;
