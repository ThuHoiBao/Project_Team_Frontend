
// import React, { useState, useEffect, useRef } from "react";
// import "./ChatBox.css";
// import imageSend from "../../images/send.png";
// import imageChatbot from "../../images/chat-bot.png";
// import axios from "axios";
// import Fuse from "fuse.js";
// import stringSimilarity from "string-similarity";

// // üîπ H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
// const removeVietnameseTones = (str) => {
//   return str
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "")
//     .replace(/ƒë/g, "d")
//     .replace(/ƒê/g, "D")
//     .toLowerCase();
// };

// // üîπ T·ª´ v√¥ nghƒ©a th∆∞·ªùng g·∫∑p trong h·ªôi tho·∫°i
// const fillerWords = [
//   "m√†y", "n√≥i", "nghe", "coi", "v·∫≠y", "bot", "ƒëi", "cho", "t", "tao",
//   "bi·∫øt", "coi", "xem", "v·ªõi", "v√†", "∆°i", "c√°i", "g√¨", "v·∫≠y", "ƒë√≥"
// ];

// // üîπ Chu·∫©n h√≥a c√¢u nh·∫≠p
// const cleanSentence = (str) => {
//   let normalized = removeVietnameseTones(str);
//   const words = normalized.split(/\s+/).filter((w) => !fillerWords.includes(w));
//   return words.join(" ");
// };

// // üîπ H√†m t√¨m c√¢u tr·∫£ l·ªùi b·∫±ng fuzzy matching n√¢ng cao
// const findTrainedAnswer = (message, trainingData) => {
//   if (!message) return null;

//   const userMsg = cleanSentence(message);

//   // Gom t·∫•t c·∫£ c√¢u h·ªèi trong trainingData
//   const allQuestions = trainingData.flatMap((item) =>
//     item.question.map((q) => ({
//       question: cleanSentence(q),
//       answer: item.answer,
//     }))
//   );

//   // 1Ô∏è‚É£ So kh·ªõp b·∫±ng string-similarity (m·∫°nh h∆°n Fuse khi chu·ªói ng·∫Øn)
//   const bestMatch = stringSimilarity.findBestMatch(
//     userMsg,
//     allQuestions.map((q) => q.question)
//   );

//   const bestScore = bestMatch.bestMatch.rating;
//   const bestAnswer = allQuestions[bestMatch.bestMatchIndex]?.answer;

//   if (bestScore > 0.35) {
//     return bestAnswer;
//   }

//   // 2Ô∏è‚É£ N·∫øu kh√¥ng ƒë·ªß g·∫ßn, fallback sang Fuse (t·ªët khi chu·ªói d√†i)
//   const fuse = new Fuse(allQuestions, {
//     includeScore: true,
//     threshold: 0.6,
//     distance: 100,
//     keys: ["question"],
//   });

//   const fuseResult = fuse.search(userMsg);
//   if (fuseResult.length > 0 && fuseResult[0].score <= 0.6) {
//     return fuseResult[0].item.answer;
//   }

//   return null;
// };

// const ChatBot = () => {
//   const [isOpen, setIsOpen] = useState(false);
//   const [messages, setMessages] = useState([]);
//   const [userMessage, setUserMessage] = useState("");
//   const [loading, setLoading] = useState(false);
//   const chatBodyRef = useRef(null);

//   const userId = "68e7313a4e30d6bb62f03934";
//   const API_URL = "http://localhost:8088/api/chat";

//   // === Training data n·ªôi b·ªô ===
//   const trainingData = [
//     { question: ["xin ch√†o", "hello", "hi", "ch√†o bot"], answer: "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c n√≥i chuy·ªán v·ªõi b·∫°n üòä" },
//     { question: ["b·∫°n l√† ai", "m l√† ai", "b·∫°n t√™n g√¨"], answer: "T√¥i l√† UTE Shop Chatbot, tr·ª£ l√Ω ·∫£o gi√∫p b·∫°n t√¨m hi·ªÉu s·∫£n ph·∫©m üí¨" },
//     { question: ["shop ·ªü ƒë√¢u", "ƒë·ªãa ch·ªâ shop", "·ªü ƒë√¢u"], answer: "Shop ch√∫ng t√¥i hi·ªán c√≥ ƒë·ªãa ch·ªâ t·∫°i 01 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM." },
//     { question: ["gi·ªù m·ªü c·ª≠a", "th·ªùi gian l√†m vi·ªác", "m·ªü c·ª≠a khi n√†o"], answer: "Shop m·ªü c·ª≠a t·ª´ 8:00 s√°ng ƒë·∫øn 21:00 t·ªëi m·ªói ng√†y." },
//     { question: ["t∆∞ v·∫•n", "c·∫ßn t∆∞ v·∫•n", "h·ªó tr·ª£"], answer: "B·∫°n c·∫ßn t∆∞ v·∫•n s·∫£n ph·∫©m g√¨ ·∫°? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m th√¥ng tin nhanh nh·∫•t!" },
//   ];

//   // Th√™m tin nh·∫Øn v√†o giao di·ªán ngay l·∫≠p t·ª©c
//   const appendLocalMessage = (role, content, dateIso) => {
//     setMessages((prev) => [
//       ...prev,
//       { role, content, date: dateIso || new Date().toISOString() },
//     ]);
//   };

//   // === G·ª≠i tin nh·∫Øn ===
//   const sendMessage = async (e) => {
//     e.preventDefault();
//     if (!userMessage.trim()) return;

//     const userMsg = userMessage.trim();
//     appendLocalMessage("user", userMsg);
//     setUserMessage("");
//     setLoading(true);

//     try {
//       const trainedAnswer = findTrainedAnswer(userMsg, trainingData);

//       // 1Ô∏è‚É£ N·∫øu c√≥ trong trainingData ‚Üí kh√¥ng g·ªçi AI
//       if (trainedAnswer) {
//         await axios.post(`${API_URL}/save-message`, {
//           userId,
//           message: userMsg,
//           role: "user",
//         });

//         appendLocalMessage("bot", trainedAnswer);

//         await axios.post(`${API_URL}/save-message`, {
//           userId,
//           message: trainedAnswer,
//           role: "chatbot",
//         });

//         setLoading(false);
//         return;
//       }

//       // 2Ô∏è‚É£ N·∫øu kh√¥ng c√≥ trong trainingData ‚Üí g·ªçi Gemini qua backend
//       const resp = await axios.post(`${API_URL}/send-message`, {
//         userId,
//         message: userMsg,
//       });

//       const { botMessage } = resp.data;
//       const botText = botMessage?.comment || "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n ü§î";
//       const botDate = botMessage?.createdAt || new Date().toISOString();

//       appendLocalMessage("bot", botText, botDate);
//     } catch (err) {
//       console.error("Error in sendMessage:", err);
//       appendLocalMessage("bot", "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.");
//     } finally {
//       setLoading(false);
//     }
//   };

//   // === L·∫•y l·ªãch s·ª≠ chat ===
//   useEffect(() => {
//     const fetchChatHistory = async () => {
//       try {
//         const r = await axios.get(`${API_URL}/history/${userId}`);
//         const history = r.data.map((msg) => ({
//           content: msg.comment || "",
//           role: msg.role?.toLowerCase() === "user" ? "user" : "bot",
//           date: msg.createdAt || msg.date,
//         }));
//         setMessages(history);
//       } catch (e) {
//         console.error("Fetch history error:", e);
//       }
//     };
//     fetchChatHistory();
//   }, [userId]);

//   // === T·ª± ƒë·ªông cu·ªôn khi c√≥ tin nh·∫Øn m·ªõi ===
//   useEffect(() => {
//     if (chatBodyRef.current) {
//       chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
//     }
//   }, [messages]);

//   // === ƒê·ªãnh d·∫°ng th·ªùi gian ===
//   const formatTime = (isoDate) => {
//     if (!isoDate) return "";
//     const d = new Date(isoDate);
//     return `${String(d.getHours()).padStart(2, "0")}:${String(
//       d.getMinutes()
//     ).padStart(2, "0")} - ${d.toLocaleDateString("vi-VN")}`;
//   };

//   return (
//     <div className="chatbot">
//       {/* N√∫t b·∫≠t chat */}
//       <button id="chatbot-toggler" onClick={() => setIsOpen(!isOpen)}>
//         <img
//           src={imageChatbot}
//           alt="chatbot"
//           style={{
//             width: 80,
//             height: 80,
//             borderRadius: "50%",
//             border: "none",
//           }}
//         />
//       </button>

//       {/* Popup Chat */}
//       {isOpen && (
//         <div className="chatbot-popup">
//           <div className="chat-header">
//             <div className="chatbot-info">
//               <img src={imageChatbot} alt="bot" className="bot-avatar" />
//               <h3>UTE Shop Chatbot</h3>
//             </div>
//             <button id="close-chatbot" onClick={() => setIsOpen(false)}>
//               ‚úï
//             </button>
//           </div>

//           <div className="chat-body" ref={chatBodyRef}>
//             {messages.map((m, idx) => (
//               <div
//                 key={idx}
//                 className={`message ${m.role === "user" ? "user" : "bot"}`}
//               >
//                 <div className="bubble">{m.content}</div>
//                 <div className="timestamp">{formatTime(m.date)}</div>
//               </div>
//             ))}
//             {loading && <div className="thinking">ƒêang tr·∫£ l·ªùi...</div>}
//           </div>

//           <div className="chat-footer">
//             <form onSubmit={sendMessage} className="chat-form">
//               <input
//                 value={userMessage}
//                 onChange={(e) => setUserMessage(e.target.value)}
//                 placeholder="Nh·∫≠p tin nh·∫Øn..."
//               />
//               <button type="submit" disabled={loading}>
//                 <img
//                   style={{ width: 36, height: 36 }}
//                   src={imageSend}
//                   alt="send"
//                 />
//               </button>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default ChatBot;



// import React, { useState, useEffect, useRef } from "react";
// import "./ChatBox.css";
// import imageSend from "../../images/send.png";
// import imageChatbot from "../../images/chat-bot.png";
// import axios from "axios";
// import Fuse from "fuse.js";
// import stringSimilarity from "string-similarity";

// // üîπ H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
// const removeVietnameseTones = (str) =>
//   str
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "")
//     .replace(/ƒë/g, "d")
//     .replace(/ƒê/g, "D")
//     .toLowerCase();

// // üîπ T·ª´ v√¥ nghƒ©a th∆∞·ªùng g·∫∑p
// const fillerWords = [
//   "m√†y","n√≥i","nghe","v·∫≠y","bot","ƒëi","cho","tao","bi·∫øt","xem",
//   "v·ªõi","v√†","∆°i","g√¨","ƒë√≥","ngo√†i","ch·ªâ","th√¥i","h·∫£","√†","kh√¥ng","ko"
// ];


// // üîπ Chu·∫©n h√≥a c√¢u nh·∫≠p
// const cleanSentence = (str) => {
//   const words = removeVietnameseTones(str)
//     .split(/\s+/)
//     .filter((w) => !fillerWords.includes(w));
//   return words.join(" ");
// };

// // üîπ T√¨m c√¢u tr·∫£ l·ªùi trong trainingData
// const findTrainedAnswer = (message, trainingData) => {
//   if (!message) return null;
//   const userMsg = cleanSentence(message);
//   const allQuestions = trainingData.flatMap((item) =>
//     item.question.map((q) => ({ question: cleanSentence(q), answer: item.answer }))
//   );

//   // String-similarity tr∆∞·ªõc
//   const bestMatch = stringSimilarity.findBestMatch(
//     userMsg,
//     allQuestions.map((q) => q.question)
//   );
//   const bestScore = bestMatch.bestMatch.rating;
//   const bestAnswer = allQuestions[bestMatch.bestMatchIndex]?.answer;

//   if (bestScore > 0.6) return bestAnswer;

//   // Fuse fallback
//   const fuse = new Fuse(allQuestions, { includeScore: true, threshold: 0.4, keys: ["question"] });
//   const fuseResult = fuse.search(userMsg);
//   return fuseResult.length > 0 && fuseResult[0].score <= 0.6
//     ? fuseResult[0].item.answer
//     : null;
// };

// const ChatBot = () => {
//   const [isOpen, setIsOpen] = useState(false);
//   const [messages, setMessages] = useState([]);
//   const [userMessage, setUserMessage] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [userId, setUserId] = useState(null); // üîπ N·∫øu null th√¨ chat local
//   const chatBodyRef = useRef(null);

//   const api = axios.create({ baseURL: "http://localhost:8088/api/chat" });

//   // Middleware th√™m token n·∫øu c√≥
//   api.interceptors.request.use((config) => {
//     const token = localStorage.getItem("token");
//     if (token) config.headers.Authorization = `Bearer ${token}`;
//     return config;
//   });

// const trainingData = [
//   // üëã Ch√†o h·ªèi & gi·ªõi thi·ªáu
//   {
//     question: [
//       "xin ch√†o",
//       "ch√†o b·∫°n",
//       "hello",
//       "hi",
//       "bot ∆°i",
//       "alo",
//       "√™ bot",
//       "ch√†o shop",
//       "c√≥ ai kh√¥ng",
//       "b·∫°n kh·ªèe kh√¥ng",
//       "h√¥m nay th·∫ø n√†o",
//     ],
//     answer:
//       "Ch√†o b·∫°n üëã M√¨nh l√† UTE Shop Chatbot ‚Äî tr·ª£ l√Ω ·∫£o c·ªßa UTE Fashion Shop! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay üí¨.",
//   },
//   {
//     question: [
//       "b·∫°n l√† ai",
//       "b·∫°n t√™n g√¨",
//       "m l√† ai",
//       "ai t·∫°o ra b·∫°n",
//       "b·∫°n ƒë∆∞·ª£c l√†m b·ªüi ai",
//     ],
//     answer:
//       "M√¨nh l√† UTE Shop Chatbot ü§ñ, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi ƒë·ªôi ng≈© sinh vi√™n UTE ƒë·ªÉ h·ªó tr·ª£ kh√°ch h√†ng mua s·∫Øm nhanh ch√≥ng, th√¢n thi·ªán v√† ti·ªán l·ª£i nh·∫•t!",
//   },
//   {
//     question: [
//       "shop l√† g√¨",
//       "shop n√†y b√°n g√¨",
//       "shop b·∫°n b√°n √°o g√¨",
//       "shop c√≥ uy t√≠n kh√¥ng",
//       "shop l√† c·ª≠a h√†ng g√¨",
//     ],
//     answer:
//       "UTE Fashion Shop l√† c·ª≠a h√†ng th·ªùi trang c·ªßa sinh vi√™n Tr∆∞·ªùng ƒêH S∆∞ ph·∫°m K·ªπ thu·∫≠t TP.HCM (HCMUTE) üëï. Shop chuy√™n b√°n √°o kho√°c, √°o thun, √°o s∆° mi c·ªßa c√°c khoa trong tr∆∞·ªùng ‚Äî v·ª´a ƒë·∫πp v·ª´a mang tinh th·∫ßn UTE ‚ù§Ô∏è.",
//   },
//   {
//     question: [
//       "shop ·ªü ƒë√¢u",
//       "ƒë·ªãa ch·ªâ shop",
//       "shop n·∫±m ·ªü ƒë√¢u",
//       "c√≥ chi nh√°nh kh√¥ng",
//     ],
//     answer:
//       "Shop c√≥ tr·ª• s·ªü ch√≠nh t·∫°i 01 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM üè¨. Ngo√†i ra, b·∫°n c√≥ th·ªÉ ƒë·∫∑t h√†ng online, shop giao to√†n qu·ªëc nh√© üöö.",
//   },
//   {
//     question: [
//       "gi·ªù m·ªü c·ª≠a",
//       "shop m·ªü c·ª≠a l√∫c m·∫•y gi·ªù",
//       "gi·ªù l√†m vi·ªác",
//       "l√†m vi·ªác ƒë·∫øn m·∫•y gi·ªù",
//     ],
//     answer:
//       "Shop m·ªü c·ª≠a t·ª´ 8:00 s√°ng ƒë·∫øn 21:30 t·ªëi m·ªói ng√†y, bao g·ªìm c·∫£ th·ª© B·∫£y v√† Ch·ªß nh·∫≠t ‚è∞.",
//   },

//   // üëï S·∫£n ph·∫©m & danh m·ª•c
//   {
//     question: [
//       "shop c√≥ nh·ªØng lo·∫°i √°o n√†o",
//       "shop c√≥ nh·ªØng lo·∫°i s·∫£n ph·∫©m n√†o",
//       "shop b√°n g√¨",
//       "shop b√°n nh·ªØng lo·∫°i √°o g√¨",
//       "c√≥ √°o thun kh√¥ng",
//       "c√≥ √°o s∆° mi kh√¥ng",
//       "c√≥ √°o kho√°c kh√¥ng",
//       "c√≥ √°o khoa kh√¥ng",
//     ],
//     answer:
//       "Shop chuy√™n b√°n √°o kho√°c, √°o thun, √°o s∆° mi c√°c khoa c·ªßa tr∆∞·ªùng HCMUTE nh∆∞ Khoa CNTT, C∆° kh√≠, ƒêi·ªán ‚Äì ƒêi·ªán t·ª≠, √î t√¥, v√† nhi·ªÅu h∆°n n·ªØa üéì.",
//   },
//   {
//     question: [
//       "√°o khoa l√† g√¨",
//       "√°o khoa c·ªßa tr∆∞·ªùng l√† sao",
//       "√°o khoa ute l√† g√¨",
//     ],
//     answer:
//       "√Åo khoa l√† √°o ƒë·ªìng ph·ª•c ri√™ng c·ªßa t·ª´ng khoa trong Tr∆∞·ªùng ƒêH S∆∞ ph·∫°m K·ªπ thu·∫≠t TP.HCM üíô. M·ªói khoa c√≥ thi·∫øt k·∫ø v√† m√†u s·∫Øc ri√™ng, th·ªÉ hi·ªán c√° t√≠nh sinh vi√™n UTE.",
//   },
//   {
//     question: [
//       "√°o ch·∫•t li·ªáu g√¨",
//       "v·∫£i √°o l√† g√¨",
//       "ch·∫•t li·ªáu c√≥ b·ªÅn kh√¥ng",
//       "√°o l√†m b·∫±ng g√¨",
//       "√°o c√≥ m√°t kh√¥ng",
//     ],
//     answer:
//       "√Åo c·ªßa shop ƒë∆∞·ª£c l√†m t·ª´ v·∫£i thun cotton l·∫°nh, co gi√£n 4 chi·ªÅu, th·∫•m h√∫t m·ªì h√¥i c·ª±c t·ªët üåø. √Åo kho√°c th√¨ may b·∫±ng v·∫£i kaki nh·∫π, tho√°ng m√°t, b·ªÅn ƒë·∫πp l√¢u d√†i.",
//   },
//   {
//     question: [
//       "√°o c√≥ ƒë·ªß size kh√¥ng",
//       "shop c√≥ size l·ªõn kh√¥ng",
//       "c√≥ size nh·ªè kh√¥ng",
//       "c√≥ size cho ng∆∞·ªùi m·∫≠p kh√¥ng",
//     ],
//     answer:
//       "Shop c√≥ ƒë·ªß size t·ª´ S ‚Üí XXL nh√©! üßç‚Äç‚ôÇÔ∏èüßç‚Äç‚ôÄÔ∏è Ph√π h·ª£p v·ªõi m·ªçi d√°ng ng∆∞·ªùi. N·∫øu c·∫ßn t∆∞ v·∫•n ch·ªçn size, b·∫°n ch·ªâ c·∫ßn g·ª≠i chi·ªÅu cao v√† c√¢n n·∫∑ng, m√¨nh gi√∫p ch·ªçn ngay.",
//   },
//   {
//     question: [
//       "s·∫£n ph·∫©m n√†o b√°n ch·∫°y nh·∫•t",
//       "√°o n√†o hot nh·∫•t",
//       "√°o n√†o ƒë·∫πp nh·∫•t",
//       "√°o n√†o ƒë∆∞·ª£c mua nhi·ªÅu nh·∫•t",
//     ],
//     answer:
//       "C√°c m·∫´u √°o thun khoa v√† √°o kho√°c khoa lu√¥n l√† l·ª±a ch·ªçn hot nh·∫•t üî• v√¨ mang phong c√°ch sinh vi√™n UTE nƒÉng ƒë·ªông, tr·∫ª trung v√† t·ª± h√†o khoa m√¨nh!",
//   },

//   // üí∞ Gi√° c·∫£ & khuy·∫øn m√£i
//   {
//     question: [
//       "gi√° bao nhi√™u",
//       "gi√° √°o thun l√† bao nhi√™u",
//       "√°o kho√°c gi√° bao nhi√™u",
//       "c√≥ √°o d∆∞·ªõi 200k kh√¥ng",
//       "shop c√≥ khuy·∫øn m√£i kh√¥ng",
//       "ƒëang sale kh√¥ng",
//       "gi·∫£m gi√° ch∆∞a",
//     ],
//     answer:
//       "Gi√° √°o thun dao ƒë·ªông t·ª´ 150k ‚Äì 300k, √°o kho√°c t·ª´ 250k ‚Äì 450k tu·ª≥ m·∫´u. Shop th∆∞·ªùng c√≥ khuy·∫øn m√£i m·ªói tu·∫ßn üéâ v√† gi·∫£m 10% cho ƒë∆°n ƒë·∫ßu ti√™n.",
//   },
//   {
//     question: [
//       "c√≥ m√£ gi·∫£m gi√° kh√¥ng",
//       "nh·∫≠p m√£ g√¨ ƒë·ªÉ gi·∫£m gi√°",
//       "c√≥ freeship kh√¥ng",
//       "ph√≠ ship bao nhi√™u",
//     ],
//     answer:
//       "Hi·ªán shop ƒëang freeship cho ƒë∆°n t·ª´ 300.000ƒë üöö v√† t·∫∑ng m√£ gi·∫£m 10% cho kh√°ch h√†ng m·ªõi! B·∫°n ch·ªâ c·∫ßn nh·∫≠p m√£ **UTESHOP10** khi thanh to√°n nh√© üí∏.",
//   },

//   // üí≥ Thanh to√°n & giao h√†ng
//   {
//     question: [
//       "thanh to√°n nh∆∞ th·∫ø n√†o",
//       "c√≥ nh·∫≠n cod kh√¥ng",
//       "tr·∫£ ti·ªÅn khi nh·∫≠n h√†ng ƒë∆∞·ª£c kh√¥ng",
//       "shop c√≥ tr·∫£ g√≥p kh√¥ng",
//     ],
//     answer:
//       "Shop h·ªó tr·ª£ thanh to√°n b·∫±ng MoMo, ZaloPay, chuy·ªÉn kho·∫£n ho·∫∑c COD (nh·∫≠n h√†ng r·ªìi tr·∫£ ti·ªÅn) üí≥. Hi·ªán t·∫°i ch∆∞a h·ªó tr·ª£ tr·∫£ g√≥p nh√©!",
//   },
//   {
//     question: [
//       "giao h√†ng b·∫±ng g√¨",
//       "shop giao h√†ng to√†n qu·ªëc kh√¥ng",
//       "bao l√¢u nh·∫≠n h√†ng",
//       "th·ªùi gian giao h√†ng",
//     ],
//     answer:
//       "Shop giao to√†n qu·ªëc qua Giao H√†ng Nhanh v√† Viettel Post üöö. TP.HCM nh·∫≠n trong 1‚Äì2 ng√†y, c√°c t·ªânh kh√°c 3‚Äì5 ng√†y l√†m vi·ªác.",
//   },
//   {
//     question: [
//       "ƒë∆∞·ª£c ki·ªÉm tra h√†ng kh√¥ng",
//       "xem h√†ng tr∆∞·ªõc khi thanh to√°n ƒë∆∞·ª£c kh√¥ng",
//     ],
//     answer:
//       "C√≥ ·∫° ‚úÖ B·∫°n ƒë∆∞·ª£c ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n v·ªõi ƒë∆°n COD. N·∫øu h√†ng l·ªói ho·∫∑c sai m·∫´u, shop h·ªó tr·ª£ ƒë·ªïi tr·∫£ ngay.",
//   },

//   // üîÅ ƒê·ªïi tr·∫£ & b·∫£o h√†nh
//   {
//     question: [
//       "ch√≠nh s√°ch ƒë·ªïi tr·∫£",
//       "ƒë·ªïi h√†ng ƒë∆∞·ª£c kh√¥ng",
//       "mu·ªën ƒë·ªïi size",
//       "ƒë·ªïi √°o ƒë∆∞·ª£c kh√¥ng",
//     ],
//     answer:
//       "Shop h·ªó tr·ª£ ƒë·ªïi size ho·∫∑c ƒë·ªïi m·∫´u trong v√≤ng 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng, mi·ªÖn ph√≠ ƒë·ªïi l·∫ßn ƒë·∫ßu üéΩ. Ch·ªâ c·∫ßn √°o c√≤n tag v√† ch∆∞a gi·∫∑t l√† ƒë∆∞·ª£c.",
//   },
//   {
//     question: [
//       "shop c√≥ ho√†n ti·ªÅn kh√¥ng",
//       "mu·ªën tr·∫£ h√†ng",
//       "tr·∫£ h√†ng ho√†n ti·ªÅn th·∫ø n√†o",
//     ],
//     answer:
//       "Shop s·∫Ω ho√†n ti·ªÅn 100% n·∫øu s·∫£n ph·∫©m l·ªói ho·∫∑c kh√¥ng ƒë√∫ng m√¥ t·∫£ ü™ô. B·∫°n ch·ªâ c·∫ßn li√™n h·ªá admin ho·∫∑c g·ª≠i l·∫°i h√¨nh ·∫£nh ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.",
//   },

//   // üì¶ ƒê∆°n h√†ng
//   {
//     question: [
//       "ki·ªÉm tra ƒë∆°n h√†ng",
//       "xem ƒë∆°n h√†ng ·ªü ƒë√¢u",
//       "ƒë∆°n h√†ng c·ªßa t√¥i ƒëang ·ªü ƒë√¢u",
//     ],
//     answer:
//       "B·∫°n c√≥ th·ªÉ xem t√¨nh tr·∫°ng ƒë∆°n h√†ng t·∫°i m·ª•c **ƒê∆°n h√†ng c·ªßa t√¥i** tr√™n website ho·∫∑c app UTE Shop üì±.",
//   },
//   {
//     question: [
//       "mu·ªën h·ªßy ƒë∆°n",
//       "c√°ch h·ªßy ƒë∆°n",
//       "shop ∆°i h·ªßy ƒë∆°n gi√∫p t√¥i",
//     ],
//     answer:
//       "N·∫øu ƒë∆°n h√†ng ch∆∞a x√°c nh·∫≠n, b·∫°n c√≥ th·ªÉ h·ªßy tr·ª±c ti·∫øp trong m·ª•c ƒê∆°n h√†ng c·ªßa t√¥i ho·∫∑c nh·∫Øn admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ üí¨.",
//   },

//   // üë§ H·ªó tr·ª£ & t√†i kho·∫£n
//   {
//     question: [
//       "qu√™n m·∫≠t kh·∫©u",
//       "ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c",
//       "ƒëƒÉng k√Ω t√†i kho·∫£n sao",
//       "ƒë·ªïi email nh∆∞ th·∫ø n√†o",
//     ],
//     answer:
//       "B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω nhanh b·∫±ng Google ho·∫∑c email. N·∫øu qu√™n m·∫≠t kh·∫©u, nh·∫•n 'Qu√™n m·∫≠t kh·∫©u' tr√™n m√†n h√¨nh ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·∫°i üîê.",
//   },
//   {
//     question: [
//       "li√™n h·ªá shop th·∫ø n√†o",
//       "shop c√≥ s·ªë ƒëi·ªán tho·∫°i kh√¥ng",
//       "shop c√≥ fanpage kh√¥ng",
//       "shop c√≥ zalo kh√¥ng",
//     ],
//     answer:
//       "B·∫°n c√≥ th·ªÉ li√™n h·ªá shop qua fanpage **UTE Fashion**, Zalo ho·∫∑c email: **utefashion@gmail.com** nh√© üìû.",
//   },
//   {
//     question: [
//       "t∆∞ v·∫•n gi√∫p t√¥i",
//       "shop ∆°i h·ªó tr·ª£ v·ªõi",
//       "c·∫ßn t∆∞ v·∫•n ch·ªçn √°o",
//       "ch·ªçn size gi√∫p t√¥i",
//     ],
//     answer:
//       "D·∫° c√≥ ·∫° üòä B·∫°n c·∫ßn t∆∞ v·∫•n ch·ªçn size, m·∫´u √°o, hay ph·ªëi ƒë·ªì? G·ª≠i m√¨nh chi·ªÅu cao, c√¢n n·∫∑ng ho·∫∑c s·ªü th√≠ch nh√© ‚Äî m√¨nh gi√∫p ngay!",
//   },

//   // üí° Phong c√°ch & ph·ªëi ƒë·ªì
//   {
//     question: [
//       "√°o n√†y m·∫∑c v·ªõi g√¨ h·ª£p",
//       "ph·ªëi ƒë·ªì sao cho ƒë·∫πp",
//       "m·∫∑c √°o khoa sao cho ng·∫ßu",
//       "g·ª£i √Ω ph·ªëi ƒë·ªì",
//     ],
//     answer:
//       "√Åo kho√°c khoa b·∫°n c√≥ th·ªÉ ph·ªëi v·ªõi √°o thun tr·∫Øng + qu·∫ßn jean l√† chu·∫©n style sinh vi√™n UTE üòé. √Åo s∆° mi th√¨ h·ª£p qu·∫ßn t√¢y ho·∫∑c kaki ƒë·ªÉ l·ªãch s·ª± h∆°n.",
//   },
// ];


//   // === Th√™m tin nh·∫Øn v√†o giao di·ªán ===
//   const appendLocalMessage = (role, content) => {
//     setMessages((prev) => [
//       ...prev,
//       { role, content, date: new Date().toISOString() },
//     ]);
//   };

//   // === G·ª≠i tin nh·∫Øn ===
//   const sendMessage = async (e) => {
//     e.preventDefault();
//     if (!userMessage.trim()) return;

//     const userMsg = userMessage.trim();
//     appendLocalMessage("user", userMsg);
//     setUserMessage("");
//     setLoading(true);

//     try {
//       const trainedAnswer = findTrainedAnswer(userMsg, trainingData);

//       if (trainedAnswer) {
//         appendLocalMessage("bot", trainedAnswer);

//         // üîπ N·∫øu c√≥ userId ‚Üí l∆∞u BE
//         if (userId) {
//           await api.post(`/save-message`, { userId, message: userMsg, role: "user" });
//           await api.post(`/save-message`, { userId, message: trainedAnswer, role: "chatbot" });
//         }
//       } else {
//         const fallbackText =
//           "Xin l·ªói, c√¢u h·ªèi n√†y hi·ªán kh√¥ng n·∫±m trong ph·∫°m vi h·ªó tr·ª£. B·∫°n h√£y th·ª≠ l·∫°i nh√©! üôè";
//         appendLocalMessage("bot", fallbackText);

//         if (userId) {
//           await api.post(`/save-message`, { userId, message: userMsg, role: "user" });
//           await api.post(`/save-message`, { userId, message: fallbackText, role: "chatbot" });
//         }
//       }
//     } catch (err) {
//       console.error("Send error:", err);
//       appendLocalMessage("bot", "Xin l·ªói, h·ªá th·ªëng g·∫∑p s·ª± c·ªë üò¢");
//     } finally {
//       setLoading(false);
//     }
//   };

//   // === L·∫•y l·ªãch s·ª≠ chat khi c√≥ userId ===
//   useEffect(() => {
//     const fetchChatHistory = async () => {
//       try {
//         const res = await api.get(`/history`);
//         if (res.data.userId) {
//           setUserId(res.data.userId);
//           const history = res.data.chatHistory.map((msg) => ({
//             content: msg.comment || "",
//             role: msg.role?.toLowerCase() === "user" ? "user" : "bot",
//             date: msg.createdAt,
//           }));
//           setMessages(history);
//         } else {
//           console.log("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p ‚Äî ch·ªâ chat local");
//         }
//       } catch (e) {
//         console.error("Fetch history error:", e);
//       }
//     };
//     fetchChatHistory();
//   }, []);

//   useEffect(() => {
//     if (chatBodyRef.current)
//       chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
//   }, [messages]);

//   const formatTime = (isoDate) => {
//     const d = new Date(isoDate);
//     return `${d.getHours().toString().padStart(2, "0")}:${d
//       .getMinutes()
//       .toString()
//       .padStart(2, "0")} - ${d.toLocaleDateString("vi-VN")}`;
//   };

//   return (
//     <div className="chatbot">
//       {/* N√∫t b·∫≠t chat */}
//       <button id="chatbot-toggler" onClick={() => setIsOpen(!isOpen)}>
//         <img
//           src={imageChatbot}
//           alt="chatbot"
//           style={{
//             width: 80,
//             height: 80,
//             borderRadius: "50%",
//             border: "none",
//           }}
//         />
//       </button>

//       {/* Popup Chat */}
//       {isOpen && (
//         <div className="chatbot-popup">
//           <div className="chat-header">
//             <div className="chatbot-info">
//               <img src={imageChatbot} alt="bot" className="bot-avatar" />
//               <h3>UTE Shop Chatbot</h3>
//             </div>
//             <button id="close-chatbot" onClick={() => setIsOpen(false)}>
//               ‚úï
//             </button>
//           </div>

//           <div className="chat-body" ref={chatBodyRef}>
//             {messages.map((m, idx) => (
//               <div
//                 key={idx}
//                 className={`message ${m.role === "user" ? "user" : "bot"}`}
//               >
//                 <div className="bubble">{m.content}</div>
//                 <div className="timestamp">{formatTime(m.date)}</div>
//               </div>
//             ))}
//             {loading && <div className="thinking">ƒêang tr·∫£ l·ªùi...</div>}
//           </div>

//           <div className="chat-footer">
//             <form onSubmit={sendMessage} className="chat-form">
//               <input
//                 value={userMessage}
//                 onChange={(e) => setUserMessage(e.target.value)}
//                 placeholder="Nh·∫≠p tin nh·∫Øn..."
//               />
//               <button type="submit" disabled={loading}>
//                 <img
//                   style={{ width: 36, height: 36 }}
//                   src={imageSend}
//                   alt="send"
//                 />
//               </button>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default ChatBot;





import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import imageSend from "../../images/send.png";
import imageChatbot from "../../images/chat-bot.png";
import "./ChatBox.css";

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [userMessage, setUserMessage] = useState("");
  const [loading, setLoading] = useState(false);
   const [userId, setUserId] = useState(null); // üîπ N·∫øu null th√¨ chat local
  const chatBodyRef = useRef(null);

  const api = axios.create({ baseURL: "http://localhost:8088/api" });
  api.interceptors.request.use((config) => {
    const token = localStorage.getItem("token");
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  });

  const appendMessage = (role, content) => {
    setMessages((prev) => [...prev, { role, content, date: new Date().toISOString() }]);
  };

const sendMessage = async (e) => {
    e.preventDefault();
    if (!userMessage.trim()) return;

    const msg = userMessage.trim();
    appendMessage("user", msg);
    setUserMessage("");
    setLoading(true);

    try {
      // G·ª≠i k√®m userId n·∫øu c√≥
      const body = userId ? { userId, message: msg } : { message: msg };
      const res = await api.post("/chat/send-message", body);

      const botReply = res.data?.botMsg?.comment || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ chatbot.";
      appendMessage("bot", botReply);
    } catch (err) {
      console.error("Send error:", err);
      appendMessage("bot", "Xin l·ªói, h·ªá th·ªëng g·∫∑p s·ª± c·ªë üò¢");
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    const fetchHistory = async () => {
      try {
        const res = await api.get("/chat/history");
        const history = res.data.chatHistory.map((m) => ({
          content: m.comment,
          role: m.role,
          date: m.createdAt,
        }));
        setMessages(history);
        setUserId(res.data.userId);
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat:", err);
      }
    };
    fetchHistory();
  }, []);

  useEffect(() => {
    if (chatBodyRef.current)
      chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
  }, [messages]);

  const formatTime = (iso) => {
    const d = new Date(iso);
    return `${d.getHours()}:${d.getMinutes()} - ${d.toLocaleDateString("vi-VN")}`;
  };

    return (
    <div className="chatbot">
      {/* N√∫t b·∫≠t chat */}
      <button id="chatbot-toggler" onClick={() => setIsOpen(!isOpen)}>
        <img
          src={imageChatbot}
          alt="chatbot"
          style={{
            width: 80,
            height: 80,
            borderRadius: "50%",
            border: "none",
          }}
        />
      </button>

      {/* Popup Chat */}
      {isOpen && (
        <div className="chatbot-popup">
          <div className="chat-header">
            <div className="chatbot-info">
              <img src={imageChatbot} alt="bot" className="bot-avatar" />
              <h3>UTE Shop Chatbot</h3>
            </div>
            <button id="close-chatbot" onClick={() => setIsOpen(false)}>
              ‚úï
            </button>
          </div>

          <div className="chat-body" ref={chatBodyRef}>
            {messages.map((m, idx) => (
              <div
                key={idx}
                className={`message ${m.role === "user" ? "user" : "bot"}`}
              >
                <div className="bubble">{m.content}</div>
                <div className="timestamp">{formatTime(m.date)}</div>
              </div>
            ))}
            {loading && <div className="thinking">ƒêang tr·∫£ l·ªùi...</div>}
          </div>

          <div className="chat-footer">
            <form onSubmit={sendMessage} className="chat-form">
              <input
                value={userMessage}
                onChange={(e) => setUserMessage(e.target.value)}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
              />
              <button type="submit" disabled={loading}>
                <img
                  style={{ width: 36, height: 36 }}
                  src={imageSend}
                  alt="send"
                />
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatBot;
