
// import React, { useState, useEffect, useRef } from "react";
// import "./ChatBox.css";
// import imageSend from "../../images/send.png";
// import imageChatbot from "../../images/chat-bot.png";
// import axios from "axios";
// import Fuse from "fuse.js";
// import stringSimilarity from "string-similarity";

// // üîπ H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
// const removeVietnameseTones = (str) => {
//   return str
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "")
//     .replace(/ƒë/g, "d")
//     .replace(/ƒê/g, "D")
//     .toLowerCase();
// };

// // üîπ T·ª´ v√¥ nghƒ©a th∆∞·ªùng g·∫∑p trong h·ªôi tho·∫°i
// const fillerWords = [
//   "m√†y", "n√≥i", "nghe", "coi", "v·∫≠y", "bot", "ƒëi", "cho", "t", "tao",
//   "bi·∫øt", "coi", "xem", "v·ªõi", "v√†", "∆°i", "c√°i", "g√¨", "v·∫≠y", "ƒë√≥"
// ];

// // üîπ Chu·∫©n h√≥a c√¢u nh·∫≠p
// const cleanSentence = (str) => {
//   let normalized = removeVietnameseTones(str);
//   const words = normalized.split(/\s+/).filter((w) => !fillerWords.includes(w));
//   return words.join(" ");
// };

// // üîπ H√†m t√¨m c√¢u tr·∫£ l·ªùi b·∫±ng fuzzy matching n√¢ng cao
// const findTrainedAnswer = (message, trainingData) => {
//   if (!message) return null;

//   const userMsg = cleanSentence(message);

//   // Gom t·∫•t c·∫£ c√¢u h·ªèi trong trainingData
//   const allQuestions = trainingData.flatMap((item) =>
//     item.question.map((q) => ({
//       question: cleanSentence(q),
//       answer: item.answer,
//     }))
//   );

//   // 1Ô∏è‚É£ So kh·ªõp b·∫±ng string-similarity (m·∫°nh h∆°n Fuse khi chu·ªói ng·∫Øn)
//   const bestMatch = stringSimilarity.findBestMatch(
//     userMsg,
//     allQuestions.map((q) => q.question)
//   );

//   const bestScore = bestMatch.bestMatch.rating;
//   const bestAnswer = allQuestions[bestMatch.bestMatchIndex]?.answer;

//   if (bestScore > 0.35) {
//     return bestAnswer;
//   }

//   // 2Ô∏è‚É£ N·∫øu kh√¥ng ƒë·ªß g·∫ßn, fallback sang Fuse (t·ªët khi chu·ªói d√†i)
//   const fuse = new Fuse(allQuestions, {
//     includeScore: true,
//     threshold: 0.6,
//     distance: 100,
//     keys: ["question"],
//   });

//   const fuseResult = fuse.search(userMsg);
//   if (fuseResult.length > 0 && fuseResult[0].score <= 0.6) {
//     return fuseResult[0].item.answer;
//   }

//   return null;
// };

// const ChatBot = () => {
//   const [isOpen, setIsOpen] = useState(false);
//   const [messages, setMessages] = useState([]);
//   const [userMessage, setUserMessage] = useState("");
//   const [loading, setLoading] = useState(false);
//   const chatBodyRef = useRef(null);

//   const userId = "68e7313a4e30d6bb62f03934";
//   const API_URL = "http://localhost:8088/api/chat";

//   // === Training data n·ªôi b·ªô ===
//   const trainingData = [
//     { question: ["xin ch√†o", "hello", "hi", "ch√†o bot"], answer: "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c n√≥i chuy·ªán v·ªõi b·∫°n üòä" },
//     { question: ["b·∫°n l√† ai", "m l√† ai", "b·∫°n t√™n g√¨"], answer: "T√¥i l√† UTE Shop Chatbot, tr·ª£ l√Ω ·∫£o gi√∫p b·∫°n t√¨m hi·ªÉu s·∫£n ph·∫©m üí¨" },
//     { question: ["shop ·ªü ƒë√¢u", "ƒë·ªãa ch·ªâ shop", "·ªü ƒë√¢u"], answer: "Shop ch√∫ng t√¥i hi·ªán c√≥ ƒë·ªãa ch·ªâ t·∫°i 01 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM." },
//     { question: ["gi·ªù m·ªü c·ª≠a", "th·ªùi gian l√†m vi·ªác", "m·ªü c·ª≠a khi n√†o"], answer: "Shop m·ªü c·ª≠a t·ª´ 8:00 s√°ng ƒë·∫øn 21:00 t·ªëi m·ªói ng√†y." },
//     { question: ["t∆∞ v·∫•n", "c·∫ßn t∆∞ v·∫•n", "h·ªó tr·ª£"], answer: "B·∫°n c·∫ßn t∆∞ v·∫•n s·∫£n ph·∫©m g√¨ ·∫°? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m th√¥ng tin nhanh nh·∫•t!" },
//   ];

//   // Th√™m tin nh·∫Øn v√†o giao di·ªán ngay l·∫≠p t·ª©c
//   const appendLocalMessage = (role, content, dateIso) => {
//     setMessages((prev) => [
//       ...prev,
//       { role, content, date: dateIso || new Date().toISOString() },
//     ]);
//   };

//   // === G·ª≠i tin nh·∫Øn ===
//   const sendMessage = async (e) => {
//     e.preventDefault();
//     if (!userMessage.trim()) return;

//     const userMsg = userMessage.trim();
//     appendLocalMessage("user", userMsg);
//     setUserMessage("");
//     setLoading(true);

//     try {
//       const trainedAnswer = findTrainedAnswer(userMsg, trainingData);

//       // 1Ô∏è‚É£ N·∫øu c√≥ trong trainingData ‚Üí kh√¥ng g·ªçi AI
//       if (trainedAnswer) {
//         await axios.post(`${API_URL}/save-message`, {
//           userId,
//           message: userMsg,
//           role: "user",
//         });

//         appendLocalMessage("bot", trainedAnswer);

//         await axios.post(`${API_URL}/save-message`, {
//           userId,
//           message: trainedAnswer,
//           role: "chatbot",
//         });

//         setLoading(false);
//         return;
//       }

//       // 2Ô∏è‚É£ N·∫øu kh√¥ng c√≥ trong trainingData ‚Üí g·ªçi Gemini qua backend
//       const resp = await axios.post(`${API_URL}/send-message`, {
//         userId,
//         message: userMsg,
//       });

//       const { botMessage } = resp.data;
//       const botText = botMessage?.comment || "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n ü§î";
//       const botDate = botMessage?.createdAt || new Date().toISOString();

//       appendLocalMessage("bot", botText, botDate);
//     } catch (err) {
//       console.error("Error in sendMessage:", err);
//       appendLocalMessage("bot", "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.");
//     } finally {
//       setLoading(false);
//     }
//   };

//   // === L·∫•y l·ªãch s·ª≠ chat ===
//   useEffect(() => {
//     const fetchChatHistory = async () => {
//       try {
//         const r = await axios.get(`${API_URL}/history/${userId}`);
//         const history = r.data.map((msg) => ({
//           content: msg.comment || "",
//           role: msg.role?.toLowerCase() === "user" ? "user" : "bot",
//           date: msg.createdAt || msg.date,
//         }));
//         setMessages(history);
//       } catch (e) {
//         console.error("Fetch history error:", e);
//       }
//     };
//     fetchChatHistory();
//   }, [userId]);

//   // === T·ª± ƒë·ªông cu·ªôn khi c√≥ tin nh·∫Øn m·ªõi ===
//   useEffect(() => {
//     if (chatBodyRef.current) {
//       chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
//     }
//   }, [messages]);

//   // === ƒê·ªãnh d·∫°ng th·ªùi gian ===
//   const formatTime = (isoDate) => {
//     if (!isoDate) return "";
//     const d = new Date(isoDate);
//     return `${String(d.getHours()).padStart(2, "0")}:${String(
//       d.getMinutes()
//     ).padStart(2, "0")} - ${d.toLocaleDateString("vi-VN")}`;
//   };

//   return (
//     <div className="chatbot">
//       {/* N√∫t b·∫≠t chat */}
//       <button id="chatbot-toggler" onClick={() => setIsOpen(!isOpen)}>
//         <img
//           src={imageChatbot}
//           alt="chatbot"
//           style={{
//             width: 80,
//             height: 80,
//             borderRadius: "50%",
//             border: "none",
//           }}
//         />
//       </button>

//       {/* Popup Chat */}
//       {isOpen && (
//         <div className="chatbot-popup">
//           <div className="chat-header">
//             <div className="chatbot-info">
//               <img src={imageChatbot} alt="bot" className="bot-avatar" />
//               <h3>UTE Shop Chatbot</h3>
//             </div>
//             <button id="close-chatbot" onClick={() => setIsOpen(false)}>
//               ‚úï
//             </button>
//           </div>

//           <div className="chat-body" ref={chatBodyRef}>
//             {messages.map((m, idx) => (
//               <div
//                 key={idx}
//                 className={`message ${m.role === "user" ? "user" : "bot"}`}
//               >
//                 <div className="bubble">{m.content}</div>
//                 <div className="timestamp">{formatTime(m.date)}</div>
//               </div>
//             ))}
//             {loading && <div className="thinking">ƒêang tr·∫£ l·ªùi...</div>}
//           </div>

//           <div className="chat-footer">
//             <form onSubmit={sendMessage} className="chat-form">
//               <input
//                 value={userMessage}
//                 onChange={(e) => setUserMessage(e.target.value)}
//                 placeholder="Nh·∫≠p tin nh·∫Øn..."
//               />
//               <button type="submit" disabled={loading}>
//                 <img
//                   style={{ width: 36, height: 36 }}
//                   src={imageSend}
//                   alt="send"
//                 />
//               </button>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default ChatBot;
import React, { useState, useEffect, useRef } from "react";
import "./ChatBox.css";
import imageSend from "../../images/send.png";
import imageChatbot from "../../images/chat-bot.png";
import axios from "axios";
import Fuse from "fuse.js";
import stringSimilarity from "string-similarity";

// üîπ H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
const removeVietnameseTones = (str) =>
  str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase();

// üîπ T·ª´ v√¥ nghƒ©a th∆∞·ªùng g·∫∑p
const fillerWords = ["m√†y", "n√≥i", "nghe", "v·∫≠y", "bot", "ƒëi", "cho", "tao", "bi·∫øt", "xem", "v·ªõi", "v√†", "∆°i", "g√¨", "ƒë√≥"];

// üîπ Chu·∫©n h√≥a c√¢u nh·∫≠p
const cleanSentence = (str) => {
  const words = removeVietnameseTones(str)
    .split(/\s+/)
    .filter((w) => !fillerWords.includes(w));
  return words.join(" ");
};

// üîπ T√¨m c√¢u tr·∫£ l·ªùi trong trainingData
const findTrainedAnswer = (message, trainingData) => {
  if (!message) return null;
  const userMsg = cleanSentence(message);
  const allQuestions = trainingData.flatMap((item) =>
    item.question.map((q) => ({ question: cleanSentence(q), answer: item.answer }))
  );

  // String-similarity tr∆∞·ªõc
  const bestMatch = stringSimilarity.findBestMatch(
    userMsg,
    allQuestions.map((q) => q.question)
  );
  const bestScore = bestMatch.bestMatch.rating;
  const bestAnswer = allQuestions[bestMatch.bestMatchIndex]?.answer;

  if (bestScore > 0.35) return bestAnswer;

  // Fuse fallback
  const fuse = new Fuse(allQuestions, { includeScore: true, threshold: 0.6, keys: ["question"] });
  const fuseResult = fuse.search(userMsg);
  return fuseResult.length > 0 && fuseResult[0].score <= 0.6
    ? fuseResult[0].item.answer
    : null;
};

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [userMessage, setUserMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [userId, setUserId] = useState(null); // üîπ N·∫øu null th√¨ chat local
  const chatBodyRef = useRef(null);

  const api = axios.create({ baseURL: "http://localhost:8088/api/chat" });

  // Middleware th√™m token n·∫øu c√≥
  api.interceptors.request.use((config) => {
    const token = localStorage.getItem("token");
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  });

  // Training data
  const trainingData = [
    { question: ["xin ch√†o", "hello", "hi"], answer: "Ch√†o b·∫°n! üòä" },
    { question: ["b·∫°n l√† ai", "m l√† ai"], answer: "M√¨nh l√† UTE Shop Chatbot üí¨" },
    { question: ["shop ·ªü ƒë√¢u", "ƒë·ªãa ch·ªâ shop"], answer: "01 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM." },
    { question: ["gi·ªù m·ªü c·ª≠a", "l√†m vi·ªác khi n√†o"], answer: "8h s√°ng - 21h t·ªëi m·ªói ng√†y." },
    { question: ["t∆∞ v·∫•n", "h·ªó tr·ª£"], answer: "B·∫°n c·∫ßn t∆∞ v·∫•n s·∫£n ph·∫©m n√†o ·∫°?" },
  ];

  // === Th√™m tin nh·∫Øn v√†o giao di·ªán ===
  const appendLocalMessage = (role, content) => {
    setMessages((prev) => [
      ...prev,
      { role, content, date: new Date().toISOString() },
    ]);
  };

  // === G·ª≠i tin nh·∫Øn ===
  const sendMessage = async (e) => {
    e.preventDefault();
    if (!userMessage.trim()) return;

    const userMsg = userMessage.trim();
    appendLocalMessage("user", userMsg);
    setUserMessage("");
    setLoading(true);

    try {
      const trainedAnswer = findTrainedAnswer(userMsg, trainingData);

      if (trainedAnswer) {
        appendLocalMessage("bot", trainedAnswer);

        // üîπ N·∫øu c√≥ userId ‚Üí l∆∞u BE
        if (userId) {
          await api.post(`/save-message`, { userId, message: userMsg, role: "user" });
          await api.post(`/save-message`, { userId, message: trainedAnswer, role: "chatbot" });
        }
      } else {
        const fallbackText =
          "Xin l·ªói, c√¢u h·ªèi n√†y hi·ªán kh√¥ng n·∫±m trong ph·∫°m vi h·ªó tr·ª£. B·∫°n h√£y th·ª≠ l·∫°i nh√©! üôè";
        appendLocalMessage("bot", fallbackText);

        if (userId) {
          await api.post(`/save-message`, { userId, message: userMsg, role: "user" });
          await api.post(`/save-message`, { userId, message: fallbackText, role: "chatbot" });
        }
      }
    } catch (err) {
      console.error("Send error:", err);
      appendLocalMessage("bot", "Xin l·ªói, h·ªá th·ªëng g·∫∑p s·ª± c·ªë üò¢");
    } finally {
      setLoading(false);
    }
  };

  // === L·∫•y l·ªãch s·ª≠ chat khi c√≥ userId ===
  useEffect(() => {
    const fetchChatHistory = async () => {
      try {
        const res = await api.get(`/history`);
        if (res.data.userId) {
          setUserId(res.data.userId);
          const history = res.data.chatHistory.map((msg) => ({
            content: msg.comment || "",
            role: msg.role?.toLowerCase() === "user" ? "user" : "bot",
            date: msg.createdAt,
          }));
          setMessages(history);
        } else {
          console.log("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p ‚Äî ch·ªâ chat local");
        }
      } catch (e) {
        console.error("Fetch history error:", e);
      }
    };
    fetchChatHistory();
  }, []);

  useEffect(() => {
    if (chatBodyRef.current)
      chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
  }, [messages]);

  const formatTime = (isoDate) => {
    const d = new Date(isoDate);
    return `${d.getHours().toString().padStart(2, "0")}:${d
      .getMinutes()
      .toString()
      .padStart(2, "0")} - ${d.toLocaleDateString("vi-VN")}`;
  };

  return (
    <div className="chatbot">
      {/* N√∫t b·∫≠t chat */}
      <button id="chatbot-toggler" onClick={() => setIsOpen(!isOpen)}>
        <img
          src={imageChatbot}
          alt="chatbot"
          style={{
            width: 80,
            height: 80,
            borderRadius: "50%",
            border: "none",
          }}
        />
      </button>

      {/* Popup Chat */}
      {isOpen && (
        <div className="chatbot-popup">
          <div className="chat-header">
            <div className="chatbot-info">
              <img src={imageChatbot} alt="bot" className="bot-avatar" />
              <h3>UTE Shop Chatbot</h3>
            </div>
            <button id="close-chatbot" onClick={() => setIsOpen(false)}>
              ‚úï
            </button>
          </div>

          <div className="chat-body" ref={chatBodyRef}>
            {messages.map((m, idx) => (
              <div
                key={idx}
                className={`message ${m.role === "user" ? "user" : "bot"}`}
              >
                <div className="bubble">{m.content}</div>
                <div className="timestamp">{formatTime(m.date)}</div>
              </div>
            ))}
            {loading && <div className="thinking">ƒêang tr·∫£ l·ªùi...</div>}
          </div>

          <div className="chat-footer">
            <form onSubmit={sendMessage} className="chat-form">
              <input
                value={userMessage}
                onChange={(e) => setUserMessage(e.target.value)}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
              />
              <button type="submit" disabled={loading}>
                <img
                  style={{ width: 36, height: 36 }}
                  src={imageSend}
                  alt="send"
                />
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatBot;
